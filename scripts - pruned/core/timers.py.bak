# scripts/core/timers.py
# Ring-0 Core: timers skeleton (names only, not wired).
# Will eventually emit events like Sleep after idle/timeout.
# For now, no behavior; safe to import.

from __future__ import annotations
import time
from typing import Callable

# Type for callback that publishes an event (placeholder)
TimerCallback = Callable[[], None]

class IdleTimer:
    """Stub for idle timeout logic. Not started, not wired yet."""
    def __init__(self, timeout_s: int, on_timeout: TimerCallback):
        self.timeout_s = timeout_s
        self.on_timeout = on_timeout
        self._last_reset = time.monotonic()

    def reset(self) -> None:
        self._last_reset = time.monotonic()

    def expired(self) -> bool:
        """For tests later; not used at runtime now."""
        return (time.monotonic() - self._last_reset) >= self.timeout_s

