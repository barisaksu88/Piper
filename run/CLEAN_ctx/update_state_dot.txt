--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\tools\clean_inventory.py
HIT: update_state_dot @ line 8
--------------------------------------------------------------------------------
     3: from __future__ import annotations
     4: import argparse, os, sys, shutil
     5: from pathlib import Path
     6: 
     7: NEEDLES = [
     8:     "set_state_dot","update_state_dot","state_dot_circle","state_label","state_text",
     9:     "current_state","_pending_state_for_ui","_waking_seen_ts","VALID_STATES",
    10:     "STATE_RE","STATE_WORD_RE","SLEEP_HINT_RE",
    11:     "refresh_ui","apply_header_updates","header_bridge",
    12:     "dev_tools","dev_controls_mount",
    13:     "persona_tone","persona_sarcasm",

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\ui\_panes_impl.py
HIT: update_state_dot @ line 229
--------------------------------------------------------------------------------
   224:         w,_ = dpg.get_item_rect_size("logs_scroll")
   225:         dpg.configure_item("log_text", wrap=max(0, int(w - PAD)))
   226:     except Exception:
   227:         pass
   228: 
   229: def _update_state_dot(state_text: str):
   230:     global _last_state, _last_change
   231:     now = time.time()
   232:     if state_text != _last_state:
   233:         _last_state, _last_change = state_text, now
   234:     show_state = _last_state if (now - _last_change) < _DWELL_SEC and _last_state else state_text

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\ui\helpers\header_utils.py
HIT: update_state_dot @ line 30
--------------------------------------------------------------------------------
    25:     sarcasm_str = "Sarcasm: on" if bool(sarcasm_on) else "Sarcasm: off"
    26:     tailing_str = f"Tailing: {shorten_path_fn(log_path)}" if (log_path and callable(shorten_path_fn)) else ""
    27:     return state_str, tone_str, sarcasm_str, tailing_str
    28: 
    29: 
    30: # If your panes.py had a private _update_state_dot(state_text), move that logic here:
    31: def update_state_dot(state_text: str) -> None:
    32:     """
    33:     Update the small state indicator dot in the header/status bar.
    34:     This is a straight move from panes.py (same semantics).
    35:     """

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\ui\helpers\header_utils.py
HIT: update_state_dot @ line 31
--------------------------------------------------------------------------------
    26:     tailing_str = f"Tailing: {shorten_path_fn(log_path)}" if (log_path and callable(shorten_path_fn)) else ""
    27:     return state_str, tone_str, sarcasm_str, tailing_str
    28: 
    29: 
    30: # If your panes.py had a private _update_state_dot(state_text), move that logic here:
    31: def update_state_dot(state_text: str) -> None:
    32:     """
    33:     Update the small state indicator dot in the header/status bar.
    34:     This is a straight move from panes.py (same semantics).
    35:     """
    36:     try:

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\ui\helpers\state_dot.py
HIT: update_state_dot @ line 8
--------------------------------------------------------------------------------
     3: import dearpygui.dearpygui as dpg
     4: 
     5: # Known/legacy tag names we may find for the status dot
     6: _DOT_TAGS = ("state_dot_circle", "state_dot", "status_dot")
     7: 
     8: def update_state_dot(state_text: str) -> None:
     9:     """
    10:     Update the header status dot color based on state_text.
    11:     Safe no-op if no dot exists.
    12:     """
    13:     try:

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\ui\pane_parts\header_bar.py
HIT: update_state_dot @ line 118
--------------------------------------------------------------------------------
   113:         "state_dot_circle",
   114:         "state_dot",           # older alias
   115:         "hb_state_dot",        # some branches used this
   116:     ]
   117: 
   118: from scripts.ui.helpers.state_dot import update_state_dot
   119: update_state_dot(state_name)
   120: 
   121:     _DOT_LAST = name
   122: def set_heartbeat(text: str) -> None:
   123:     """Update the heartbeat label."""

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\ui\pane_parts\header_bar.py
HIT: update_state_dot @ line 119
--------------------------------------------------------------------------------
   114:         "state_dot",           # older alias
   115:         "hb_state_dot",        # some branches used this
   116:     ]
   117: 
   118: from scripts.ui.helpers.state_dot import update_state_dot
   119: update_state_dot(state_name)
   120: 
   121:     _DOT_LAST = name
   122: def set_heartbeat(text: str) -> None:
   123:     """Update the heartbeat label."""
   124:     try:
