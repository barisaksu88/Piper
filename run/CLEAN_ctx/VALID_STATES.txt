--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\entries\_app_gui_entry_impl.py
HIT: VALID_STATES @ line 137
--------------------------------------------------------------------------------
   132: STATE_RE = re.compile(
   133:     r"\[STATE\]\s*(?:([A-Za-z_]+)\s*(?:→|->)\s*([A-Za-z_]+)|([A-Za-z_]+))",
   134:     re.IGNORECASE
   135: )
   136: # Valid Piper states (whitelist to avoid parsing junk like "[STATE]TE]")
   137: VALID_STATES = {"SLEEPING", "WAKING", "LISTENING", "THINKING", "SPEAKING"}
   138: STATE_WORD_RE = re.compile(r"\b(sleeping|waking|listening|thinking|speaking)\b", re.IGNORECASE)
   139: SLEEP_HINT_RE = re.compile(
   140:     r"(going to sleep|back to sleep|piper is (now )?sleeping|^sleep$|sleeping\.\.\.)",
   141:     re.IGNORECASE,
   142: )

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\entries\_app_gui_entry_impl.py
HIT: VALID_STATES @ line 312
--------------------------------------------------------------------------------
   307:             new_state = "SPEAKING"
   308: 
   309:         # Apply state if valid and changed (whitelist to block junk like "TE")
   310:     if new_state:
   311:         candidate = (new_state or "").strip().upper()
   312:         if candidate in VALID_STATES and candidate != current_state:
   313:             old_state = current_state
   314:             current_state = candidate
   315:             # record when WAKING began (for UI dwell advance)
   316:             try:
   317:                 import time as _t

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\entries\_app_gui_entry_impl.py
HIT: VALID_STATES @ line 795
--------------------------------------------------------------------------------
   790:                 elif s.lstrip().startswith(">"):
   791:                     ns = "SPEAKING"
   792: 
   793:             if ns:
   794:                 cand = (ns or "").strip().upper()
   795:                 if cand in VALID_STATES and cand != globals().get("current_state"):
   796:                     globals()["current_state"] = cand
   797:                     try:
   798:                         from scripts.ui.pane_parts import header_bar as _hb
   799:                     except Exception:
   800:                         from ui.pane_parts import header_bar as _hb

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\entries\_app_gui_entry_impl_backup.py
HIT: VALID_STATES @ line 136
--------------------------------------------------------------------------------
   131: STATE_RE = re.compile(
   132:     r"\[STATE\]\s*(?:([A-Za-z_]+)\s*(?:→|->)\s*([A-Za-z_]+)|([A-Za-z_]+))",
   133:     re.IGNORECASE
   134: )
   135: # Valid Piper states (whitelist to avoid parsing junk like "[STATE]TE]")
   136: VALID_STATES = {"SLEEPING", "WAKING", "LISTENING", "THINKING", "SPEAKING"}
   137: STATE_WORD_RE = re.compile(r"\b(sleeping|waking|listening|thinking|speaking)\b", re.IGNORECASE)
   138: SLEEP_HINT_RE = re.compile(
   139:     r"(going to sleep|back to sleep|piper is (now )?sleeping|^sleep$|sleeping\.\.\.)",
   140:     re.IGNORECASE,
   141: )

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\entries\_app_gui_entry_impl_backup.py
HIT: VALID_STATES @ line 311
--------------------------------------------------------------------------------
   306:             new_state = "SPEAKING"
   307: 
   308:     # Apply state if valid and changed (whitelist to block junk like "TE")
   309:     if new_state:
   310:         candidate = (new_state or "").strip().upper()
   311:         if candidate in VALID_STATES and candidate != current_state:
   312:             old_state = current_state
   313:             current_state = candidate
   314:             if not state_queue or state_queue[-1] != candidate:
   315:                 state_queue.append(candidate)
   316:             if not has_state_tag:

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\tools\clean_inventory.py
HIT: VALID_STATES @ line 9
--------------------------------------------------------------------------------
     4: import argparse, os, sys, shutil
     5: from pathlib import Path
     6: 
     7: NEEDLES = [
     8:     "set_state_dot","update_state_dot","state_dot_circle","state_label","state_text",
     9:     "current_state","_pending_state_for_ui","_waking_seen_ts","VALID_STATES",
    10:     "STATE_RE","STATE_WORD_RE","SLEEP_HINT_RE",
    11:     "refresh_ui","apply_header_updates","header_bridge",
    12:     "dev_tools","dev_controls_mount",
    13:     "persona_tone","persona_sarcasm",
    14: ]

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\ui\helpers\gui_ingest.py
HIT: VALID_STATES @ line 11
--------------------------------------------------------------------------------
     6: from typing import Deque, Tuple
     7: 
     8: # Public constants (imported by entry)
     9: AVAILABLE_STATES_BANNER_RE = re.compile(r"\[STATE\].*available_states=", re.IGNORECASE)
    10: STATE_RE   = re.compile(r"\[STATE\]\s*(?:([A-Za-z_]+)\s*(?:→|->)\s*([A-Za-z_]+)|([A-Za-z_]+))", re.IGNORECASE)
    11: VALID_STATES = {"SLEEPING", "WAKING", "LISTENING", "THINKING", "SPEAKING"}
    12: STATE_WORD_RE = re.compile(r"\b(sleeping|waking|listening|thinking|speaking)\b", re.IGNORECASE)
    13: SLEEP_HINT_RE = re.compile(r"(going to sleep|back to sleep|piper is (now )?sleeping|^sleep$|sleeping\.\.\.)", re.IGNORECASE)
    14: TONE_RE     = re.compile(r"\[TONE\]\s*([A-Za-z]+)", re.IGNORECASE)
    15: SARCASM_RE  = re.compile(r"\[SARCASM\]\s*(on|off|true|false|1|0)", re.IGNORECASE)
    16: PERSONA_RE  = re.compile(r"\[PERSONA\].*?\btone\s*=\s*([A-Za-z]+).*?\bsarcasm\s*=\s*(on|off|true|false|1|0)", re.IGNORECASE)

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\ui\helpers\gui_ingest.py
HIT: VALID_STATES @ line 120
--------------------------------------------------------------------------------
   115:     # State detection
   116:     has_state_tag = "[STATE]" in s
   117:     new_state = detect_new_state(s)
   118:     if new_state:
   119:         candidate = (new_state or "").strip().upper()
   120:         if candidate in VALID_STATES and candidate != current_state:
   121:             old_state = current_state
   122:             current_state = candidate
   123:             syn = f"[STATE] {old_state} -> {candidate}"
   124:             if not has_state_tag and (last_state_log or "") != syn:
   125:                 try:
