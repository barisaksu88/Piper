--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\entries\_app_gui_entry_impl.py
HIT: SLEEP_HINT_RE @ line 139
--------------------------------------------------------------------------------
   134:     re.IGNORECASE
   135: )
   136: # Valid Piper states (whitelist to avoid parsing junk like "[STATE]TE]")
   137: VALID_STATES = {"SLEEPING", "WAKING", "LISTENING", "THINKING", "SPEAKING"}
   138: STATE_WORD_RE = re.compile(r"\b(sleeping|waking|listening|thinking|speaking)\b", re.IGNORECASE)
   139: SLEEP_HINT_RE = re.compile(
   140:     r"(going to sleep|back to sleep|piper is (now )?sleeping|^sleep$|sleeping\.\.\.)",
   141:     re.IGNORECASE,
   142: )
   143: 
   144: # Persona toggle lines (from CLI/log)

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\entries\_app_gui_entry_impl.py
HIT: SLEEP_HINT_RE @ line 304
--------------------------------------------------------------------------------
   299:             new_state = m.group(3)
   300:     else:
   301:         mw = STATE_WORD_RE.search(s)
   302:         if mw:
   303:             new_state = mw.group(1)
   304:         elif SLEEP_HINT_RE.search(s):
   305:             new_state = "SLEEPING"
   306:         elif s.lstrip().startswith(">"):
   307:             new_state = "SPEAKING"
   308: 
   309:         # Apply state if valid and changed (whitelist to block junk like "TE")

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\entries\_app_gui_entry_impl.py
HIT: SLEEP_HINT_RE @ line 788
--------------------------------------------------------------------------------
   783:                     ns = m.group(3)
   784:             else:
   785:                 mw = STATE_WORD_RE.search(s)
   786:                 if mw:
   787:                     ns = mw.group(1)
   788:                 elif SLEEP_HINT_RE.search(s):
   789:                     ns = "SLEEPING"
   790:                 elif s.lstrip().startswith(">"):
   791:                     ns = "SPEAKING"
   792: 
   793:             if ns:

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\entries\_app_gui_entry_impl_backup.py
HIT: SLEEP_HINT_RE @ line 138
--------------------------------------------------------------------------------
   133:     re.IGNORECASE
   134: )
   135: # Valid Piper states (whitelist to avoid parsing junk like "[STATE]TE]")
   136: VALID_STATES = {"SLEEPING", "WAKING", "LISTENING", "THINKING", "SPEAKING"}
   137: STATE_WORD_RE = re.compile(r"\b(sleeping|waking|listening|thinking|speaking)\b", re.IGNORECASE)
   138: SLEEP_HINT_RE = re.compile(
   139:     r"(going to sleep|back to sleep|piper is (now )?sleeping|^sleep$|sleeping\.\.\.)",
   140:     re.IGNORECASE,
   141: )
   142: 
   143: # Persona toggle lines (from CLI/log)

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\entries\_app_gui_entry_impl_backup.py
HIT: SLEEP_HINT_RE @ line 303
--------------------------------------------------------------------------------
   298:             new_state = m.group(3)
   299:     else:
   300:         mw = STATE_WORD_RE.search(s)
   301:         if mw:
   302:             new_state = mw.group(1)
   303:         elif SLEEP_HINT_RE.search(s):
   304:             new_state = "SLEEPING"
   305:         elif s.lstrip().startswith(">"):
   306:             new_state = "SPEAKING"
   307: 
   308:     # Apply state if valid and changed (whitelist to block junk like "TE")

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\tools\clean_inventory.py
HIT: SLEEP_HINT_RE @ line 10
--------------------------------------------------------------------------------
     5: from pathlib import Path
     6: 
     7: NEEDLES = [
     8:     "set_state_dot","update_state_dot","state_dot_circle","state_label","state_text",
     9:     "current_state","_pending_state_for_ui","_waking_seen_ts","VALID_STATES",
    10:     "STATE_RE","STATE_WORD_RE","SLEEP_HINT_RE",
    11:     "refresh_ui","apply_header_updates","header_bridge",
    12:     "dev_tools","dev_controls_mount",
    13:     "persona_tone","persona_sarcasm",
    14: ]
    15: 

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\ui\helpers\gui_ingest.py
HIT: SLEEP_HINT_RE @ line 13
--------------------------------------------------------------------------------
     8: # Public constants (imported by entry)
     9: AVAILABLE_STATES_BANNER_RE = re.compile(r"\[STATE\].*available_states=", re.IGNORECASE)
    10: STATE_RE   = re.compile(r"\[STATE\]\s*(?:([A-Za-z_]+)\s*(?:â†’|->)\s*([A-Za-z_]+)|([A-Za-z_]+))", re.IGNORECASE)
    11: VALID_STATES = {"SLEEPING", "WAKING", "LISTENING", "THINKING", "SPEAKING"}
    12: STATE_WORD_RE = re.compile(r"\b(sleeping|waking|listening|thinking|speaking)\b", re.IGNORECASE)
    13: SLEEP_HINT_RE = re.compile(r"(going to sleep|back to sleep|piper is (now )?sleeping|^sleep$|sleeping\.\.\.)", re.IGNORECASE)
    14: TONE_RE     = re.compile(r"\[TONE\]\s*([A-Za-z]+)", re.IGNORECASE)
    15: SARCASM_RE  = re.compile(r"\[SARCASM\]\s*(on|off|true|false|1|0)", re.IGNORECASE)
    16: PERSONA_RE  = re.compile(r"\[PERSONA\].*?\btone\s*=\s*([A-Za-z]+).*?\bsarcasm\s*=\s*(on|off|true|false|1|0)", re.IGNORECASE)
    17: 
    18: def badge_for_logs(line: str) -> str:

--------------------------------------------------------------------------------
FILE: C:\Piper\scripts\ui\helpers\gui_ingest.py
HIT: SLEEP_HINT_RE @ line 72
--------------------------------------------------------------------------------
    67:         if m.group(2): return m.group(2)
    68:         if m.group(3): return m.group(3)
    69:     else:
    70:         mw = STATE_WORD_RE.search(s)
    71:         if mw: return mw.group(1)
    72:         if SLEEP_HINT_RE.search(s): return "SLEEPING"
    73:         if s.lstrip().startswith(">"): return "SPEAKING"
    74:     return None
    75: 
    76: def consume_line(
    77:     line: str,
