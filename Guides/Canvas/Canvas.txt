# Piper - Living Context

*Last updated: 2025-09-05*

---

# 🔝 Always-Read Section

## Rules

### Refresh & Memory

* **Canvas First** → Before every reply, re-read this top section (down to Usage).
* User is the architect; ChatGPT is the railmaster/developer. Provide plain-English, step-by-step guidance and drive the rails without asking “what next?”.
* If any instruction conflicts, **this section overrides chat history**.
* Maintain state across replies (Rails, Known Issues, KGB, Architecture, Call Graph).
* ChatGPT updates Canvas only for rails progress, KGB title, and callgraph.

### Development Flow

* Stay on rails; off-rail requests = PARKED.
* One change → smoke test → KGB tag. Tiny scope: plan → patch → smoke → tag → next.
* Tag format: `KGB-YYYY-MM-DD_<RAIL><step>_<slug>`
* If a step fails twice → REVERT to last KGB snapshot and PARK it.
* No piling changes or “fix-the-fix” loops.
* Layout constants live in `ui/layout_constants.py`. All geometry/theme numbers must come from there.
* Edits: full-script if ≤200 lines, full-function if >200 lines. Warn if file >300 lines or function >50 lines.
* Prefer components (ui/components/\*) and thin entries (<150 lines).

### File Safety

* Never modify `logic/personality.py` (user-owned).
* Prefer undo/backup; keep changes atomic and auditable.

### Mirroring & Anchors

* Follow mirroring rules; anchors are permanent unless explicitly removed.
* If asked to bypass mirroring/anchors, confirm with the user.

### Response Discipline

Every response must:

* Begin with: *“I have re-read the Always-Read section.”*
* Follow the Step Response Template structure.
* After each fix, end with: *“If this correction does not fix the issue, \[revert/maintain].”*

### Step Response Template

```
Chapter: <name> | Ring: <Core/Services/UI> | Scope: ✅/🟨/🛑
Plan: one tiny change only
Patch: (full file or full function; exact locations if needed)
Smoke (≤3 lines): run → expect → pass condition
KGB: tag on pass / revert+park on fail
Parking: list any out-of-scope or failing items carried forward
Compliance: rings clean; invariants honored; SAFE_MODE; no drift
Mirrors: assistant confirms existence in Drive/Dropbox mirrors; never ask user to check; if both mirrors fail → reply with `> Need Drive/Dropbox access to continue.`
Guardrail: append one-liner — "If this correction does not fix the issue, [revert/maintain]."
```

### Mirrored Files Rule

* **Truth** = .txt mirrors (Drive + Dropbox).
* **Examined** = fully read top-to-bottom.
* **Idiotproofed** = change confirmed by re-open/re-read.
* **Always Check**: never assume.
* **Fail Rule**: if both mirrors fail → say: `> Need Drive/Dropbox access to continue.`
* Example:

  * Drive/Dropbox examined: `entries/_app_gui_entry_impl.txt`, `ui/panes.txt`
  * Idiotproofed: `ui/layout_constants.txt` (viewport size update)

## Folder Layout & Architecture (scripts only)

```
├── common/
│   ├── __init__.py
│   ├── config.py
│   ├── logging.py
│   ├── types.py
│   └── utils.py
├── core/
│   ├── __init__.py
│   ├── bg_poller.py
│   ├── bridge.py
│   ├── core_app.py
│   ├── core_commands.py
│   ├── core_machine.py
│   ├── event_queue.py
│   ├── events.py
│   ├── flags.py
│   ├── poll_helpers.py
│   ├── router.py
│   ├── startup.py
│   ├── state_defs.py
│   ├── timers.py
│   └── transition_plan.py
├── entries/
│   ├── __init__.py
│   ├── _app_gui_entry_impl.py
│   ├── _app_gui_entry_impl_backup.py
│   ├── app_cli_entry.py
│   ├── app_gui_entry.py
│   ├── app_wake_entry.py
├── services/
│   ├── adapters/
│   │   └── mock_asr_wake.py
│   ├── asr/
│   │   ├── __init__.py
│   │   └── vosk_adapter.py
│   ├── memory/
│   │   ├── __init__.py
│   ├── persona/
│   │   ├── __init__.py
│   ├── tts/
│   │   ├── __init__.py
│   │   ├── speak_once.py
│   │   └── tts_manager.py
│   ├── wake/
│   │   ├── __init__.py
│   │   └── porcupine_adapter.py
│   ├── __init__.py
│   ├── asr_vosk.py
│   ├── base.py
│   ├── cli_prompt.py
│   ├── persona_adapter.py
│   └── wake_porcupine.py
├── ui/
│   ├── components/
│   │   ├── __init__.py
│   │   ├── chat_pane.py
│   │   ├── controls_pane.py
│   │   ├── logs_pane.py
│   │   └── status_pane.py
│   ├── helpers/
│   │   ├── avatar_fix.py
│   │   ├── chatlog_writer.py
│   │   ├── dev_adapters.py
│   │   ├── dev_controls_mount.py
│   │   ├── gui_ingest.py
│   │   ├── gui_loop.py
│   │   ├── header_bridge.py
│   │   ├── header_utils.py
│   │   ├── init_core.py
│   │   ├── layout_utils.py
│   │   ├── refresh_core.py
│   │   ├── scroll_utils.py
│   │   ├── sink_utils.py
│   │   ├── state_dot.py
│   │   ├── tag_utils.py
│   │   ├── theme_utils.py
│   │   └── viewport_utils.py
│   ├── pane_parts/
│   │   ├── __init__.py
│   │   ├── avatar_pane.py
│   │   ├── chat_pane.py
│   │   ├── header_bar.py
│   │   └── logs_pane.py
│   ├── __init__.py
│   ├── _panes_impl.py
│   ├── dev_tools.py
│   ├── dpg_app.py
│   ├── heartbeat.py
│   ├── ipc_child.py
│   ├── layout_constants.py
│   ├── panes.py
│   ├── state_header.py
│   ├── tailer.py
│   └── theme.py
```

## Call Graph

* `entries.app_cli_entry → core.core_machine, services.cli_prompt, logic.command_handler`
* `entries.app_gui_entry → ui.piper_gui, ui.heartbeat, core.core_machine`
* `core.core_machine → logic.wake_cycle, services.tts_manager, services.asr_manager, core.state_signals`
* `ui.piper_gui → services.cli_prompt, core.state_signals, ui.avatar_manager`
* `logic.wake_cycle → services.asr_manager, services.tts_manager`
* `logic.command_handler → services.tts_manager, core.state_signals`
* `ui.heartbeat → core.state_signals`

## KGB

KGB-2025-09-05\_B07\_header\_stable

05.09.2025 Friday, 11:41

---

## Index (Read Every Time)

### Current Rails

*Roadmap, update with progress.*

### Key Files

*Quick reference on file responsibilities.*

### Known Issues

*List of active bugs or broken features.*

### Parked

*Deferred items or paused experiments.*

### Persistent Guides (short notes)

* Anchors, mirroring, trailing, state color coding, etc. → see extended chapters below.

### Reference Library

* Cleanup rails, rerail wrapups, architecture snapshots, experimental notes (read on request).

### Behavior & Persona

*Short rules on persona behavior.*

### State & GUI

*Short rules on state transitions and GUI behavior.*

---

## Usage

* Enforce **Rules + Core Sections** every reply.
* Check Index chapters if relevant (Rails, Known Issues, etc.).
* Keep non-essential sections untouched unless explicitly updated.
* After code changes: update **Call Graph, Rails, Known Issues, Parked, and KGB**.
* If inconsistencies are found between project mirrors and this canvas, they must be called out and corrected immediately.

---

# ⬇️ Read-When-Needed Section

## Current Rails (extended)

### Step 1 — Freeze the truth ✅

* Tag a KGB snapshot (no code change): `KGB-2025-09-03_CLEAN_START` (done)

### Step 2 — Header authority 🟨

* Keep one place that sets the dot and label: `ui/pane_parts/header_bar.py`.
* All other modules must call `header_bar.set_state_dot(name)` and never recolor directly.
* **we are here**

### Step 3 — Tail classifier (PARKED)

* Keep state detection in `entries/_app_gui_entry_impl.py` (`_classify_and_buffer`).
* It writes `current_state` and queues logs once.
* No recolor; only calls `header_bar.set_state_dot(name)`.

### Step 4 — Refresh bridge (PARKED)

* `ui/helpers/refresh_core.py` only pushes strings & buffers to widgets.
* It may mount Dev pane, but no state parsing.

### Step 5 — Purge duplicates (PARKED)

* Remove extra `set_state_dot` / color maps outside `header_bar`.
* Remove duplicate persona tone/sarcasm parsing outside classifier.
* Remove duplicate `[STATE] …` formatting elsewhere.

### Step 6 — Re-smoke (PARKED)

* CLI + GUI smoke: ensure chat/log only once, header text+dot update, auto-advance works.

## Parked (extended)

* Auto-advance WAKING → LISTENING dwell (\~0.6s). (To be tackled in Step 3)
* Header dedupe (legacy vs \*\_label tag updates). (To be tackled in Step 5)
* `_app_gui_entry_impl.py` size cut (target ≤150 lines). (To be tackled after Step 6, once all steps are finished)

## Key Files (extended)

* `core/core_machine.py` → state machine, wake/sleep logic
* `services/cli_prompt.py` → prompt formatting
* `ui/piper_gui.py` → Dear PyGui frontend
* `scripts/dev_agent.py` → patch & restart tool
* `logic/personality.py` → Piper persona (read-only)
* `services/tts_manager.py` → TTS orchestration

## Known Issues (extended)

* Avatar scale is wrong (zoomed in).
* Wake transition not happening.
* Autoscroll sometimes fails (needs further testing).

## Persistent Guides (digest)

* Anchors & Mirroring rules — mirrors are the only truth, anchors persist unless explicitly removed.
* Trailing/testing guide — dual-window testing, CLI+GUI trailing.
* State color coding — dot + header must follow the color map.
* Persona control — sarcasm/tone toggles wired only through persona config.

(Full verbatim guide from v2.1 can be expanded on request.)

## Reference Library (verbatim)

* Rerail wrapups (RERAIL1, RERAIL2, RERAIL3)
* Cleanup rails docs & symbol maps
* Additional architecture snapshots
* Any experimental notes not marked as persistent

## Behavior & Persona (extended)

* On wake, greet: **“Hello sir!”**
* Persona only from `logic/personality.py` — never overridden.
* Barge-in interrupts TTS; auto-sleep returns to idle after silence.

## State & GUI (extended)

* State transitions: `SLEEPING → WAKING → LISTENING → THINKING → SPEAKING` (and back).
* GUI color coding follows the State Color Guide; CLI+GUI trailing behavior per the testing guides.
* Dual-window testing (CLI + GUI) is standard during smoke tests.
